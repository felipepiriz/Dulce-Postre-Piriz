/*
  CSS en texto 
    list-style-type: darle estilo a las listas, con fotos tamb
    font-style: normal y italica mas comunes
    font-weight:darle negrita a las palabras nomral, o bold o del 100 a 900 
    font-size:tamaño 16px es lo establecido, se pude cambiar en el *
    font-family: tipo, google fonts para ver tipos
    text-aling:para centrar, left, right, center
    line-height: interlineado
    text-decoration:darle un subrayado, underline, overline, line-through y wavy dan ondas
    text-transform:uppercase, para mayuscula
    background-color: color de fondo a algo
    background-image: fondo con una imagen. para nombrarlo es url(aca la direc de la img)
    background-size: tamaño de la imagen, cover, contain, o con px+
    background-repeat: pa que no se repita no-repeat y para que repita en un solo eje repeat-yeleje
    background-position: la posiscion right,center, top, bottom,etc 2 valores
    background-attachment:fixed; hace que la imagen quede quieta mientras vos moves
  CSS edicion en cajas
    box-sizing:border box define al elemento,borde y padding como un solo valor.}
    overflow: afecta al texto dentro de la caja. 4 valores visible(lo deja como esta), hidden (corta el texto 
    hasta
     donde de la caja), scroll(genera una barra en los ejes) y auto (genera el scroll en el eje necesario)
    position: posicion de la caja. fixed se queda quieta en todo momento con scroll tambien y para definir su 
    posicion se pone desde una esquina con top,bottom,left o right. absolute se queda en su lugar para siempre 
    sin scroll.
    sticky tiene su posicion y cuando paso por ahi, se queda quieta cn scroll como fixed. relative 
    z-index: dependiendo su valor cuanto mas grande se pone por encima de la otra caja que esten superpuestas.
  border radius:valor un porcentaje, para hacer redondos los bordes.
  box-shadow:para darle sombras.
  si quiero deslizamiento en la flecha para subir se declara htmli{}, con una etiqueta scroll-behavior y valor 
  smooth.
  display:flex frexibilidad en las cajas.
  flex-direction: row,row-reverse, coluumn,column-reverse
  flex-wrap:wrap para que si no hay espacios, las cajas se ubiquen una debajo de la orta.
  flex-flow: das valores del direction y wrap.
  justigy-content: flex-start(izq), center,flex-end(derecha), space-around(separacion),space-between,space evenly,
  aling_items:mismos 3 primeros valores pero en el eje contrario.,baseline(mantiene el eje del contenido no delas 
  cajas), stretch(se estira el elemento)
  aling-content:alinea el contenido,flex end,flex start, center, space around, space between, space evenly.
  order:para order con una recta numerica.
  flex-basis;si se permite el crecimiento que crezca tantos px. con flex-grow le damos un valo para que que crezca.
  y flex-shrink para que dismimnuya.
   GRIDS
    display:grids
    algunas propiedades:
        grid-template-colums, para el tamaño de cada columna
        grid-template-row:para el tamaño de cada fila
        grid-template-areas: indica la disposicion de las areas en el grid. texto en comilla simbolizauna fila
        grid-column-gap: tamaño de los huecos entre columna
        grid-row-gap: tamaño de los huecos entre filas. 
        gap:espaciado entre los elementos.  
    grid-template-area: darle forma con palabras a la pagina. dandole valores a cada caja con las row y columns, luego con palabras en el
    area vamos asignandole un valor a cada caja y haciendola de la fomra que queramos. luego con grid areay el valor que le dimos podemos
    hacerle los cambios que queramos.
    justify-content:para modificar la caja donce se encuentra el elemento sobre el eje y.
    aling-content:para modificar la caja donce se encuentra el elemento sobre el eje x.
    aling-self:para modiciar el elemento que se encuentra dentro de la caja sobre el eje y.
    justigy-self:para modiciar el elemento que se encuentra dentro de la caja sobre el eje x.
para trabajar con distitntas resoluciones se utiliza:
    @media only screen and (min-widht:un valor ) and (max-widht: otro valor) y de esa forma vamos a cambiar el estilo de la pagina para
    la resolucion puesta.
    resoluciones para media:320(cel chico), 480(cel grande), 600px(tablets chica), 768 y 1023(tablets 10pulgadas o
    alguna notebook), 1024(tablat grande y algunas pantallas de escritorio o netbook) 1200(escritorio).
    TRANSICIONES Y ANIMACIONES
    con el hover sobre el elemento, ponemos transform: scale (un valor como 1.05, o 0.95) para un zoom, y para que
    sea menos repentina, con transition: all (un valor en segundos como) 0.75s, y es mas lenta y mas linda(se pone
    en la imagen no en el hover pero tambien poner en el hover para un efecto de "entrada y salida" en la imagen)
    con filter: y un filtro y (un valor en %) se le aplica un filtro en el hover.
    ANIMACIONES:
        background-image:linear-gradient(valores de colores degradado) para hace un degradado.lineal para centro con radian.
            para darle direcction se agrega adelante de los colores ej:(to direccion(left,right,top,bottom), red, orange)
            con una medidda al lado del color, se le puede dar la cant de color que puede haber
        transform: valores( translate, rotate, rotateX, rotateY, rotateZ,scale, skewX, skexY, skew)
        para hacer trnasformaciones pero no son efectos/transiciones que se mueven. y sus valores van en () primero ejex 
        despues ejey, rotacion y skew en deg(angulos). scale (1.00,1.00).
        con valores negativos se invierten. 
        transition: darle tiempo a las transiciones para que no sean tan bruscos.
        :focus para hacerle un zoom.
        ::placeholder, para cambiar el color del valor dentro del input. 
        animation-name:se le da el nombre que quieras, animation-iteration-count(cantidad de veces que queres
        que se haga el efecto) animation-timing-function(division de los seg en inicio, desenlace y fin)
        (valores: linear, ease,ease-in,ease-out,ease-in-out)   
        animation-duration(duracion de la animacion), animation-delay (delay), animation direction( direccion, 
        alternate alterna)
        @keyframes nombre de animation-name{
            dentro se le puede dar efectos a los distintos % de la transicion de 0 al 100%
        }
    GIT
        guardar todos los cambios en una nube.
    COMANDOS
        -git --config global user.name "name" nombre de usuarios que efectua los cambios
        -git --config global user.email (mail) para conectar louego con github.
        +git init para iniciar el guardado de los archivos.
        +git add (nombre del archivo) para guardar el archivo o con un . se guardan todos los archivos existentes.
        +git comit -m (nombre dque le quieras poner a la version) para enviarlos y ya tener guardada la version.
        +git status para ver el estado de los archivos.
        +git log --oneline para ver todas nuestras versiones.
        git (numero de la version) -d para eliminar la version
        +git branch (nombre de la rama) para crear ramas del master.
        +git merge (rama que queremos traer) para unir las ramas con el master.
        se puede volver al pasado y hacer nuevas versiones en el pasado ya hechas otras versiones.
        con un git checkount al pasado y haces unos cambiso se hace una nua version en medio.
        +para unir una version pasada y el master ahi que ir a la version pasada usar el git merge
          aceptar los cambios usar git add . desues git comit -m () y luego volver con el checkout al master
          y con otro git merge y la version con los cambios ya estaria.
  GITHUB
        nube donde vamos a guardar nuestro codigo, y los commits y versiones.
        git pull: para traer cambios que hicimos en github.
        git push: para enviar los cambios desde VSC a github.
    BOOTSTRAP
    sirve para maquetar y es responsive.
    son 12 filas.
    dimensione: breakpoints
        <576 col-xs
        >576 col-sm
        >768 col-md
        >992 col-lg
        >1200 col-xl
        >1400 col-xxl
*/
@import url('https://fonts.googleapis.com/css2?family=Dosis:wght@300&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Send+Flowers&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@300&display=swap');

*{
  margin: 0px;
  padding: 0px;
  box-sizing: border-box;
}
body{
  background-color: #A64D79;
}
.navbar{
  background-color: #D5A6BD ;
}
.title{
  color: white !important;
  font-size: 40px;
  margin-bottom: 10px;
}
.navChanges{
  padding-left: 15px;
  font-family: 'Cormorant Garamond', serif;
  font-weight: bold;
}
.logoCentro{
  background-image: url(https://cdn-icons-png.flaticon.com/512/2488/2488456.png);
  background-position: center;
  background-repeat: no-repeat;
  height: 600px;
  width: auto;
}
.bg-rosa{
  background-color: #D5A6BD;
}
.container-fluid--2{
  min-height: 475px;
  margin: 0px;
  padding: 0px;
}
h3 a{
  text-decoration: none;
  color: #ffffff;
  font-family: 'Indie Flower', cursive; 
  font-size:42px;
}
h3 a:hover{
  color: #A64D79;
}
.textChanges{
  margin-top: 40px;
  font-size: 17px;
  font-family: 'Cormorant Garamond', cursive;
  font-weight: bold;
}
p a {
  color: #A64D79;
}
p a:hover{
  color: #ffffff;
}

.img-fluid{
  border: 5px groove grey;
  max-height:350px ;
  width: auto;
}
.centrarCarrusel{
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}
.nleft{
  width: 50%;
}
.nright{
  width: 50%;
}
.btn-rosa{
  background-color: #A64D79;
  padding: 5px 15px;
  margin-top: 10px;
}
.btn a{
  text-decoration: none;
  color: #ffffff;
}
/*comienza footer*/
.containerFoo{
  height: 300px;

}
.foo{
  height: 300px;
  padding-top: 30px;
  display: flex;
  flex-direction:row;
  justify-content: space-evenly;
}

strong {
  color: white;
  font-size: 30px;
  font-family: 'Indie Flower', cursive;
}

.listFoo {
  margin-top: 20px;
  list-style: none;
  font-family: 'Cormorant Garamond', serif;
  font-weight: bold;
  float: center;
  color: white;
  font-size: 18px;
  line-height: 30px;
}

footer div li a {
  color: white;
  text-decoration: none;
}
footer div li a:hover {
  color: #D5A6BD;
}
.fooImage{
  height: 15px;
}
.btn-changes{
  color: black;
  background-color: #D5A6BD;
}
.marginTopBox{
  margin-top: 50px;
}
.margintop{
  margin-top: 125px;
}
/*termina footer*/
.centrarContacto{
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
}
.btn{
  margin-top: 20px;
}
#comment{
  width: 208px;
}
@media only screen and (max-width:550px){
  .logoCentro{
    background-size: 325px;
  }
  .foo{
    height: 500px;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    margin-left: 40px;
  }
  .galeria{
    display: none;
  }
  .contacto{
    display: none;
  }
  .imageMedia{
    margin-left: 5%;
  }
  .nleft{
    height: 50%;
    width: 100%;
    display: flex;
    flex-direction: column;
  }
  .nright{
    height: 50%;
    width: 100%;
    display: flex;
    flex-direction: column;
  }
  .img-fluid{
    height: 150px;
    width: 300px;
  }
}